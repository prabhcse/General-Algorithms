import java.util.Arrays;


/*
 Author : Prabhmanmeet Singh.
 Method : To simulate the binary communication.
 */

public class Binary_Communication {
	
	public static void main(String[] args) {
		// Divisor
		Float m = new Float(2147483647);
		// Multiplication
		Float k = new Float(16807);
		// Seed
		Float s = new Float(1111);
		// Array for data
		Float[] data_uniform = new Float[10000];
		
		// Implement sequence generator
		// S(n+1) = S(n) * k mod m
		// r(n) = S(n) / m
		
		// Calculate 10,000 entries between 0 and 1
		for(int i = 0 ; i < 10000 ; i++){
			if(i == 0){
				data_uniform[i] = ( (k * s) % m ) / m;	// each data value is r(n)
			}
			else{
				data_uniform[i] = ( ( k * data_uniform[i-1] * m ) % m ) / m;
			}
		}
		// Sorting the array
		Arrays.sort(data_uniform);
		
		// Given:
		// O is sent with 0.45 probability.
		// 1 is sent with 0.55 probability.
		// 0 is received with 0.85 probability.
		// 1 is received with 0.95 probability.
		float zero_sent = 0.45F;
		float one_sent = 0.55F;
		float zero_received = 0.85F;
		float one_received = 0.95F;
		Float[] One_sent = new Float[8000];
		float count_zero_sent = 0F;
		float count_one_sent = 0F;
		float count_zero_received = 0F;
		float count_one_received = 0F;
		float count_zero_errors = 0F;
		float count_one_errors = 0F;
		int c = 0;
		for(int i = 0 ; i < 10000 ; i++){
			if(data_uniform[i] <= zero_sent)
				count_zero_sent += 1;			// counting the values below 0.45
			else
			{	
				count_one_sent += 1;
				One_sent[c] = data_uniform[i];
				One_sent[c] = 1 - One_sent[c];	// to get the distribution for 1s
				c++;
			}
		}
		for(int i = 0 ; i < 10000 ; i++){
			if(data_uniform[i] <= ( zero_sent * zero_received ) ){
				count_zero_received += 1;						// sent as 0 and received as 0
			}
			else if(data_uniform[i] > ( zero_sent * zero_received ) && data_uniform[i] <= zero_sent){
				count_zero_errors += 1;			// sent as 0 but received as 1
				//count_one_received +=1;
			}
		}
		for(int i = 0 ; i < 10000 ; i++){
			if(One_sent[i] != null){
			if(One_sent[i] <= (one_sent * one_received)){
				count_one_received += 1;						// sent as 1 and received as 1
			}
			else if(One_sent[i] >(one_sent * one_received) && One_sent[i] <= one_sent){
				count_one_errors += 1;		// sent as 1 but received as 0
				//count_zero_received+=1;
			}
			if(One_sent[i] >= one_sent){
				System.out.println("Show"+One_sent[i]);
			}
			}
			else
				break;
		}
		/*System.out.println("One's sent : "+count_zero_sent);
		System.out.println("One's sent : "+count_one_sent);*/
		System.out.println("\nProbability of zero received : "+(count_zero_received+count_one_errors)/10000);
		System.out.println("\nProbability of 1 sent and received : "+count_one_received/count_one_sent+count_one_received);
		System.out.println("\nProbability of errors : "+(count_zero_errors+count_one_errors)/10000);
		/*System.out.println("Lowest : "+data_uniform[0]+"\n"+"Highest : "+data_uniform[9999]);*/
	}

}
