import java.util.Arrays;



/*
 Author : Prabhmanmeet Singh
 Method : TO build exponentially distributed psuedorandom number.
 */

public class Exponential_Distribution {

	public static void main(String[] args) {
		// For Uniform Distribution, copied from solution 3.
		// Divisor
		Float m = new Float(2147483647);
		// Multiplication
		Float k = new Float(16807);
		// Seed
		Float s = new Float(1111);
		// Array for Uniform psuedo-random number
		Float[] data_uniform = new Float[10000];
		// Mean
		Float mean = new Float(0);
		// Variance
		Float variance = new Float(0);
		
		// Calculate 10,000 entries between 0 and 1
		for(int i = 0 ; i < 10000 ; i++){
			if(i == 0){
				data_uniform[i] = ( (k * s) % m ) / m;	// each data value is r(n)
			}
			else{
				data_uniform[i] = ( ( k * data_uniform[i-1] * m ) % m ) / m;
			}
		}
		// Sorting the array
		Arrays.sort(data_uniform);
		// Till here was Uniform psuedorandom number generation.
		
		// Exponential psuedorandom number
		// Array for Exponential psuedo-random number
		Float[] data_exponential = new Float[10000];
		Float lambda = new Float(2);
		
		// Generation of random numbers
		for(int i = 0; i < 10000 ; i++){
			// natural log.. there is a problem here, the formula is correct but java is calculating is incorrectly.
			double temp = ((-1)/lambda) * ( ( Math.log(data_uniform[i].doubleValue()) ) );		
			data_exponential[i] = new Float((float) temp);
			//to be done how to remove the negative
		}
		
		// Sorting the array
		Arrays.sort(data_exponential);
		
		for(int i = 0; i < 10000 ; i++){
			mean = mean + data_exponential[i];		// Adding all
		}
		mean = mean / 10000;			// Dividing to find mean
		
		// Variance
		
		for(int i = 0; i < 10000 ; i++){
			variance = variance + (data_exponential[i] - mean) * (data_exponential[i] - mean);
		}
		variance = variance / 10000;
		
		System.out.println("\nThe Mean is : "+mean);
		System.out.println("\nThe Variance is : "+variance);
		System.out.println("\nTheoretical Mean is : "+(1/lambda));
		System.out.println("\nTheoretical Mean is : "+(1/(lambda * lambda)));
		//System.out.println(data_exponential[2]+" AND "+data_uniform[2]);		// 0.021959618 AND 0.01171875
	}

}
