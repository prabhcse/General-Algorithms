public static void heapSort()
	{
		Scanner obj = new Scanner(System.in);
		int temp = 0;
		List<Integer> arr = new ArrayList<Integer>();
		while( (temp = obj.nextInt()) != 0)
		{
			arr.add(temp);
		}
		
		System.out.println("\n Input: "+arr);
		
		
		for(int i = arr.size() - 1; i > 0; i--)
		{
			// start from leaf nodes
			heapify(arr, i);
			int temp1 = arr.get(0);
			arr.set(0, arr.get(i));
			arr.set(i, temp1);
		}
		
		System.out.println("\n Output: "+arr);
	}
	
	public static void heapify(List<Integer> arr, int root)
	{
		boolean left = false;
		// Use root, Starts from index of leaf node
		// tells whether have left and right child, OR only left child
		if(root%2 == 1)
		{
			root = root / 2;
			left = true;
		}
		else
		{
			root = (root - 1) / 2;
		}
		
		// Tree keeps on getting smaller
		while(root >= 0)
		{
			if(left)
			{
				if(arr.get(root*2 + 1) > arr.get(root))
				{
					int temp = arr.get((root*2)+1);
					arr.set((root*2)+1, arr.get(root));
					arr.set(root, temp);
				}
				left = false;
			}
			else
			{
				if(arr.get((root*2) + 1) < arr.get((root*2) + 2))
				{
					if(arr.get((root*2) + 2) > arr.get(root))
					{
						int temp = arr.get((root*2) + 2);
						arr.set( (root*2)+2, arr.get(root));
						arr.set( (root), temp );
					}
				}
				else if(arr.get((root*2) + 1) > arr.get(root))
				{
					int temp = arr.get((root*2) + 1);
					arr.set( (root*2)+1, arr.get(root));
					arr.set( (root), temp );
				}
			}
			
			root--;
		}
		
	}
