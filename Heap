// T scope is only in and till the below function code block
template <class T>
void show(vector<T> & arr)
{
	cout<<"\n";
	for(T i = 0; i < arr.size(); i++)
	{
		cout<<arr[i]<<",";
		if( i > 0 && (i+1)%10 == 0)
		{
			cout<<"\n";
		}
	}
}

// root is index of parent of subtree
// n is last index till where to do sink: required when swapping in sort method, otherwise array's last index works
void max_heap(vector<int> & arr, int root, int n)
{
	while( (2*root + 1) <= n )
	{
		// right child present
		if( ( (2*root) + 2 ) <= n )
		{
			if(arr[(2*root) + 1] > arr[(2*root) + 2])
			{
				if(arr[(2*root) + 1] > arr[root])
				{
					int temp = arr[(2*root) + 1];
					arr[(2*root) + 1] = arr[root];
					arr[root] = temp;
					
					root = 2*root + 1;
				}
				else
				{
					// Subtree OK
					break;
				}
			}
			else
			{
				if(arr[(2*root) + 2] > arr[root])
				{
					int temp = arr[(2*root) + 2];
					arr[(2*root) + 2] = arr[root];
					arr[root] = temp;
					
					root = 2*root + 2;
				}
				else
				{
					// Subtree OK
					break;
				
				}
			}
		}
		else
		{
			if(arr[(2*root) + 1] > arr[root])
			{
				int temp = arr[(2*root) + 1];
				arr[(2*root) + 1] = arr[root];
				arr[root] = temp;
				
				root = 2*root + 1;
			}
			else
			{
				// Subtree OK
				break;
			}
		}
	
	}
}

void heap_create(vector<int> & arr)
{
	int root = arr.size()-1;
	if(root%2 == 0)
	{
		// right child
		root = (root - 2) / 2;
	}
	else
	{
		// left child
		root = (root - 1) / 2;
	}
	
	while(root >= 0)
	{
		// like a sink, index of parent passed
		max_heap(arr, root, arr.size()-1);
		root--;
	}
}

void All::Heap()
{
	vector<int> arr;

	for(int i = 5; i > 0; i--)
	{
		arr.push_back(i);
	}
	
	// Need to create max heap first
	heap_create(arr);
	
	for(int i = arr.size()-1; i > 0; i--)
	{
		int temp = arr[i];
		arr[i] = arr[0];
		arr[0] = temp;
		// Acts as sink
		max_heap(arr, 0, i-1);
	}
	
	show(arr);
}
