// Select Top kth highest, Top kth smaller, UNIQUE (will work for non-unique too, but duplicates will have their own positions)
	// if high = true means highest, else smallest 
	// k highest, means index (n-k)
	// k smallest, means index k
	public static void Quick_Select(ArrayList<Integer> arr, int k, boolean high)
	{
		if(k <= 0 || k > arr.size())
		{
			System.out.println("\n Incorrect k value, out of bound");
		}
		
		// k matches the index of element to be found
		// k ranges from 1 to arr.size()
		if(high)
		{
			k = arr.size() - k;
		}
		else
		{
			k--;
		}
		
		boolean found  = false;
		int s = 0, e = arr.size()-1;
		while(s < e)
		{
			
			int p = partition(arr, s, e);
//			System.out.print("\n Pivot:"+p);
			if( k == p )
			{
				System.out.println("\n FOUND:"+arr.get(k));
				found = true;
				break;
			}
			else if( p < k )
			{
				s = p+1;
			}
			else if( p > k )
			{
				e = p-1;
			}
			
			// Special case,
			// We had two elements, now single element left.
			// when single element left, as s or e will change.
			if(s == e && k == s )
			{
				System.out.println("\n FOUND:"+arr.get(k));
				found = true;
				break;
			}
		}
		
		if(!found)
		{
			System.out.println("\n ERROR: Not Found");
		}
	}
	
	// Same as QuickSort, but without recursion.
	public static int partition(ArrayList<Integer> arr, int s, int e)
	{
		
		// Never be -1, as if(s < e) check is done part of previous function
		int pivot = -1;
		
		if(s < e)
		{
			pivot = s;
			int i = s+1, j = e;
			while(true)
			{
				while(arr.get(i) < arr.get(pivot))
				{
					if(i == e) break;
					i++;
				}
				while(arr.get(j) >= arr.get(pivot))
				{
					if(j == s) break;
					j--;
				}
				if(i >= j)
				{
					break;
				}
				int t = arr.get(i);
				arr.set(i, arr.get(j));
				arr.set(j, t);
			}
			
			int t = arr.get(j);
			arr.set(j, arr.get(s));
			arr.set(s, t);
			// set pivot's index
			pivot = j;
		}
		return pivot;
	}
